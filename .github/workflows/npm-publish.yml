name: Latest @zapshark/zapi Release

on:
  release:
    types: [created]

permissions:
  contents: read
  id-token: write

# Force PowerShell on Windows self-hosted runners
defaults:
  run:
    shell: pwsh

jobs:
  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Environment sanity
        run: |
          node -v
          npm -v
          Write-Host "Scripts:"; node -p "require('./package.json').scripts"
          Write-Host "Has lockfile? -> " -NoNewline
          if (Test-Path "package-lock.json") { Write-Host "yes" } else { Write-Host "no" }

      - name: Install deps (no audit/fund noise)
        run: npm ci --no-audit --fund=false

      - name: Run tests (if present)
        run: |
          $hasTest = node -p "(require('./package.json').scripts||{}).test ? '1' : ''"
          if ($hasTest) {
            Write-Host "Running npm testâ€¦"
            npm test
          } else {
            Write-Host "No test script found; skipping."
          }

  publish-npm:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
          cache: 'npm'

      - name: Configure npm auth
        run: |
          $content = "//registry.npmjs.org/:_authToken=${{ secrets.NPM_TOKEN }}"
          $npmrc = Join-Path $HOME ".npmrc"
          Set-Content -Path $npmrc -Value $content -Encoding Ascii
          Write-Host "Wrote $npmrc"

      - name: Verify tag matches version (optional)
        run: |
          $pkg = node -p "require('./package.json').version"
          $tag = "${{ github.ref }}".Replace("refs/tags/","")
          Write-Host "Tag: $tag  Package: v$pkg"
          if ("v$pkg" -ne $tag) {
            Write-Error "Tag/package mismatch"; exit 1
          }

      - name: Install deps
        run: npm ci --no-audit --fund=false

      # If you build artifacts (e.g., transpile/merge), do it here:
      # - run: npm run build
      # - run: npm run merge-src

      - name: Publish to npm
        run: npm publish --access public --provenance

      - name: Show last npm debug log if present
        if: failure()
        run: |
          $logDir = Join-Path $HOME ".npm\_logs"
          if (Test-Path $logDir) {
            $log = Get-ChildItem $logDir -Filter *.log | Sort-Object LastWriteTime -Descending | Select-Object -First 1
            if ($log) {
              Write-Host "---- npm debug log ----"
              Get-Content $log.FullName
            } else {
              Write-Host "No npm debug log found."
            }
          } else {
            Write-Host "No npm debug dir found."
          }
