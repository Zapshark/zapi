name: Latest @zapshark/zapi Release

on:
  release:
    types: [created]

permissions:
  contents: read
  id-token: write

jobs:
  build:
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: 'npm'

      - name: Environment sanity
        run: |
          node -v
          npm -v
          echo "Scripts:" && node -p "require('./package.json').scripts"
          echo "Has lockfile? ->" && [ -f package-lock.json ] && echo yes || echo no

      - name: Install deps (no audit/fund noise)
        run: npm ci --no-audit --fund=false

      # Only run tests if a "test" script exists
      - name: Run tests (if present)
        run: |
          if node -e "process.exit(+(!!(require('./package.json').scripts||{}).test===false))"; then
            echo "No test script found; skipping."
          else
            npm test
          fi

  publish-npm:
    needs: build
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          registry-url: https://registry.npmjs.org/
          cache: 'npm'

      - name: Configure npm auth
        run: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Verify tag matches version (optional)
        run: |
          PKG_VERSION=$(node -p "require('./package.json').version")
          TAG="${GITHUB_REF##*/}"
          echo "Tag: $TAG  Package: v$PKG_VERSION"
          [ "v$PKG_VERSION" = "$TAG" ] || { echo "Tag/package mismatch"; exit 1; }

      - name: Install deps
        run: npm ci --no-audit --fund=false

      # If you build artifacts (e.g., transpile), do it here:
      # - run: npm run build

      - name: Publish to npm
        run: npm publish --access public --provenance
      - name: Show last npm debug log if present
        if: failure()
        run: |
          LOG=$(ls -t ~/.npm/_logs/* 2>/dev/null | head -n 1 || true)
          if [ -n "$LOG" ]; then
          echo "---- npm debug log ----"
          cat "$LOG"
          else
          echo "No npm debug log found."
          fi
